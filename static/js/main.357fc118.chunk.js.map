{"version":3,"sources":["components/Navbar.js","pages/Login.js","pages/Home.js","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["pages","settings","Navbar","React","anchorElNav","setAnchorElNav","anchorElUser","setAnchorElUser","handleCloseNavMenu","AppBar","position","sx","mb","Container","maxWidth","Toolbar","disableGutters","Typography","variant","noWrap","component","mr","display","xs","md","Box","flexGrow","IconButton","size","onClick","event","currentTarget","color","Menu","id","anchorEl","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","open","Boolean","onClose","map","page","MenuItem","textAlign","Button","my","Tooltip","title","p","Avatar","alt","src","mt","setting","Login","useState","username","setUsername","password","setPassword","checkLogin","setCheckLogin","loginMessage","setLoginMessage","history","useHistory","useEffect","handleLogin","push","spacing","Grid","container","item","TextField","label","helperText","onChange","target","value","onKeyPress","e","key","type","Home","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.357fc118.chunk.js","sourcesContent":["import * as React from \"react\";\r\n\r\nimport {\r\n  AppBar,\r\n  Box,\r\n  Toolbar,\r\n  IconButton,\r\n  Typography,\r\n  Menu,\r\n  Container,\r\n  Avatar,\r\n  Button,\r\n  Tooltip,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport MenuIcon from \"@mui/icons-material/Menu\";\r\n\r\nconst pages = [\"Tag_1\", \"Tag_2\", \"Tag_3\"];\r\nconst settings = [\"Profile\", \"Account\", \"Dashboard\", \"Logout\"];\r\n\r\nfunction Navbar() {\r\n  const [anchorElNav, setAnchorElNav] = React.useState(null);\r\n  const [anchorElUser, setAnchorElUser] = React.useState(null);\r\n\r\n  const handleOpenNavMenu = (event) => {\r\n    setAnchorElNav(event.currentTarget);\r\n  };\r\n  const handleOpenUserMenu = (event) => {\r\n    setAnchorElUser(event.currentTarget);\r\n  };\r\n\r\n  const handleCloseNavMenu = () => {\r\n    setAnchorElNav(null);\r\n  };\r\n\r\n  const handleCloseUserMenu = () => {\r\n    setAnchorElUser(null);\r\n  };\r\n\r\n  return (\r\n    <AppBar position=\"static\" sx={{ mb: 3 }}>\r\n      <Container maxWidth=\"xl\">\r\n        <Toolbar disableGutters>\r\n          <Typography\r\n            variant=\"h6\"\r\n            noWrap\r\n            component=\"div\"\r\n            sx={{ mr: 2, display: { xs: \"none\", md: \"flex\" } }}\r\n          >\r\n            LOGO\r\n          </Typography>\r\n\r\n          <Box sx={{ flexGrow: 1, display: { xs: \"flex\", md: \"none\" } }}>\r\n            <IconButton\r\n              size=\"large\"\r\n              aria-label=\"account of current user\"\r\n              aria-controls=\"menu-appbar\"\r\n              aria-haspopup=\"true\"\r\n              onClick={handleOpenNavMenu}\r\n              color=\"inherit\"\r\n            >\r\n              <MenuIcon />\r\n            </IconButton>\r\n            <Menu\r\n              id=\"menu-appbar\"\r\n              anchorEl={anchorElNav}\r\n              anchorOrigin={{\r\n                vertical: \"bottom\",\r\n                horizontal: \"left\",\r\n              }}\r\n              keepMounted\r\n              transformOrigin={{\r\n                vertical: \"top\",\r\n                horizontal: \"left\",\r\n              }}\r\n              open={Boolean(anchorElNav)}\r\n              onClose={handleCloseNavMenu}\r\n              sx={{\r\n                display: { xs: \"block\", md: \"none\" },\r\n              }}\r\n            >\r\n              {pages.map((page) => (\r\n                <MenuItem key={page} onClick={handleCloseNavMenu}>\r\n                  <Typography textAlign=\"center\">{page}</Typography>\r\n                </MenuItem>\r\n              ))}\r\n            </Menu>\r\n          </Box>\r\n          <Typography\r\n            variant=\"h6\"\r\n            noWrap\r\n            component=\"div\"\r\n            sx={{ flexGrow: 1, display: { xs: \"flex\", md: \"none\" } }}\r\n          >\r\n            LOGO\r\n          </Typography>\r\n          <Box sx={{ flexGrow: 1, display: { xs: \"none\", md: \"flex\" } }}>\r\n            {pages.map((page) => (\r\n              <Button\r\n                key={page}\r\n                onClick={handleCloseNavMenu}\r\n                sx={{ my: 2, color: \"white\", display: \"block\" }}\r\n              >\r\n                {page}\r\n              </Button>\r\n            ))}\r\n          </Box>\r\n\r\n          <Box sx={{ flexGrow: 0 }}>\r\n            <Tooltip title=\"Open settings\">\r\n              <IconButton onClick={handleOpenUserMenu} sx={{ p: 0 }}>\r\n                <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/2.jpg\" />\r\n              </IconButton>\r\n            </Tooltip>\r\n            <Menu\r\n              sx={{ mt: \"45px\" }}\r\n              id=\"menu-appbar\"\r\n              anchorEl={anchorElUser}\r\n              anchorOrigin={{\r\n                vertical: \"top\",\r\n                horizontal: \"right\",\r\n              }}\r\n              keepMounted\r\n              transformOrigin={{\r\n                vertical: \"top\",\r\n                horizontal: \"right\",\r\n              }}\r\n              open={Boolean(anchorElUser)}\r\n              onClose={handleCloseUserMenu}\r\n            >\r\n              {settings.map((setting) => (\r\n                <MenuItem key={setting} onClick={handleCloseNavMenu}>\r\n                  <Typography textAlign=\"center\">{setting}</Typography>\r\n                </MenuItem>\r\n              ))}\r\n            </Menu>\r\n          </Box>\r\n        </Toolbar>\r\n      </Container>\r\n    </AppBar>\r\n  );\r\n}\r\nexport default Navbar;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { TextField, Grid, Container, Button } from \"@mui/material\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction Login() {\r\n  const [username, setUsername] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [checkLogin, setCheckLogin] = useState(false);\r\n  const [loginMessage, setLoginMessage] = useState(\"\");\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    setUsername(\"\");\r\n    setPassword(\"\");\r\n    setCheckLogin(false);\r\n    setLoginMessage(\"\");\r\n  }, []);\r\n\r\n  const handleUsername = (event) => {\r\n    setUsername(event.target.value);\r\n    setLoginMessage(\"\");\r\n  };\r\n\r\n  const handlePassword = (event) => {\r\n    setPassword(event.target.value);\r\n    setLoginMessage(\"\");\r\n  };\r\n\r\n  const handleLogin = (event) => {\r\n    if (username === \"test\" && password === \"password\") {\r\n      setLoginMessage(\"Login Success\");\r\n      setCheckLogin(true);\r\n      history.push(`/home`);\r\n    } else if (username === \"\") {\r\n      setLoginMessage(\"*** Username required ***\");\r\n    } else if (password === \"\") {\r\n      setLoginMessage(\"*** Password required ***\");\r\n    } else {\r\n      setLoginMessage(\"Incorrect Username or Password\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container sx={{ textAlign: \"center\" }} spacing={2}>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            id=\"username_login\"\r\n            label=\"Username\"\r\n            helperText=\"Enter test\"\r\n            onChange={handleUsername}\r\n            onKeyPress={(e) => {\r\n              if (e.key === \"Enter\") {\r\n                handleLogin();\r\n              }\r\n            }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            id=\"password_login\"\r\n            label=\"Password\"\r\n            helperText=\"Enter password\"\r\n            onChange={handlePassword}\r\n            type=\"password\"\r\n            onKeyPress={(e) => {\r\n              if (e.key === \"Enter\") {\r\n                handleLogin();\r\n              }\r\n            }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Button onClick={handleLogin} variant=\"contained\">\r\n            Login\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          {checkLogin ? <div></div> : <div>{loginMessage}</div>}\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\n\r\nfunction Home() {\r\n  return <div>Successfully login</div>;\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport Navbar from \"./components/Navbar\";\n\nimport Login from \"./pages/Login\";\nimport Home from \"./pages/Home\";\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <Switch>\n        <Route exact path=\"/ewce\" component={Login} />\n        <Route exact path=\"/home\" component={Home} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}